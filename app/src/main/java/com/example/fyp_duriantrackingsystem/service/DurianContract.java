package com.example.fyp_duriantrackingsystem.service;

import io.reactivex.Flowable;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.concurrent.Callable;

import org.web3j.abi.EventEncoder;
import org.web3j.abi.TypeReference;
import org.web3j.abi.datatypes.Address;
import org.web3j.abi.datatypes.Bool;
import org.web3j.abi.datatypes.DynamicArray;
import org.web3j.abi.datatypes.DynamicStruct;
import org.web3j.abi.datatypes.Event;
import org.web3j.abi.datatypes.Function;
import org.web3j.abi.datatypes.StaticStruct;
import org.web3j.abi.datatypes.Type;
import org.web3j.abi.datatypes.Utf8String;
import org.web3j.abi.datatypes.generated.Uint256;
import org.web3j.abi.datatypes.generated.Uint8;
import org.web3j.crypto.Credentials;
import org.web3j.protocol.Web3j;
import org.web3j.protocol.core.DefaultBlockParameter;
import org.web3j.protocol.core.RemoteCall;
import org.web3j.protocol.core.RemoteFunctionCall;
import org.web3j.protocol.core.methods.request.EthFilter;
import org.web3j.protocol.core.methods.response.BaseEventResponse;
import org.web3j.protocol.core.methods.response.Log;
import org.web3j.protocol.core.methods.response.TransactionReceipt;
import org.web3j.tuples.generated.Tuple12;
import org.web3j.tuples.generated.Tuple5;
import org.web3j.tuples.generated.Tuple6;
import org.web3j.tuples.generated.Tuple7;
import org.web3j.tx.Contract;
import org.web3j.tx.TransactionManager;
import org.web3j.tx.gas.ContractGasProvider;


/**
 * <p>Auto generated code.
 * <p><strong>Do not modify!</strong>
 * <p>Please use the <a href="https://docs.web3j.io/command_line.html">web3j command line tools</a>,
 * or the org.web3j.codegen.SolidityFunctionWrapperGenerator in the
 * <a href="https://github.com/hyperledger/web3j/tree/main/codegen">codegen module</a> to update.
 *
 * <p>Generated with web3j version 1.6.1.
 */
@SuppressWarnings("rawtypes")
public class DurianContract extends Contract {

    public static final String BINARY = "";

    private static String librariesLinkedBinary;

    public static final String FUNC_RECORDHARVESTDURIAN = "recordHarvestDurian";

    public static final String FUNC_REMOVEDURIAN = "removeDurian";

    public static final String FUNC_SETUSER = "setUser";

    public static final String FUNC_TRANSFERDURIANOWNERSHIP = "transferDurianOwnership";

    public static final String FUNC_UPDATESPOILEDSTATE = "updateSpoiledState";

    public static final String FUNC_AUTHORIZEDFARMERS = "authorizedFarmers";

    public static final String FUNC_BATCHCODES = "batchCodes";

    public static final String FUNC_DURIANS = "durians";

    public static final String FUNC_DURIANSTATETIMESTAMPS = "durianStateTimestamps";

    public static final String FUNC_GENERATETRACKINGREPORT = "generateTrackingReport";

    public static final String FUNC_GETBATCHCODES = "getBatchCodes";

    public static final String FUNC_GETDURIAN = "getDurian";

    public static final String FUNC_GETDURIANSTATETIMESTAMPS = "getDurianStateTimestamps";

    public static final String FUNC_GETSPOILEDDURIANS = "getSpoiledDurians";

    public static final String FUNC_GETTRANSACTIONS = "getTransactions";

    public static final String FUNC_GETUSERDURIANS = "getUserDurians";

    public static final String FUNC_ISBATCHCODEEXISTED = "isBatchCodeExisted";

    public static final String FUNC_ISPROFILESET = "isProfileSet";

    public static final String FUNC_OWNER = "owner";

    public static final String FUNC_TRANSACTIONS = "transactions";

    public static final String FUNC_USERS = "users";

    public static final Event DURIANHARVESTED_EVENT = new Event("DurianHarvested",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {
            }, new TypeReference<Uint256>() {
            }));
    ;

    public static final Event OWNERSHIPTRANSFERRED_EVENT = new Event("OwnershipTransferred",
            Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Address>(true) {
            }, new TypeReference<Uint8>() {
            }, new TypeReference<Uint256>() {
            }));
    ;

    @Deprecated
    protected DurianContract(String contractAddress, Web3j web3j, Credentials credentials,
                             BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    protected DurianContract(String contractAddress, Web3j web3j, Credentials credentials,
                             ContractGasProvider contractGasProvider) {
        super(BINARY, contractAddress, web3j, credentials, contractGasProvider);
    }

    @Deprecated
    protected DurianContract(String contractAddress, Web3j web3j,
                             TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        super(BINARY, contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static List<DurianHarvestedEventResponse> getDurianHarvestedEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(DURIANHARVESTED_EVENT, transactionReceipt);
        ArrayList<DurianHarvestedEventResponse> responses = new ArrayList<DurianHarvestedEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            DurianHarvestedEventResponse typedResponse = new DurianHarvestedEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.batchCode = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static DurianHarvestedEventResponse getDurianHarvestedEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(DURIANHARVESTED_EVENT, log);
        DurianHarvestedEventResponse typedResponse = new DurianHarvestedEventResponse();
        typedResponse.log = log;
        typedResponse.batchCode = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        return typedResponse;
    }

    public Flowable<DurianHarvestedEventResponse> durianHarvestedEventFlowable(EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getDurianHarvestedEventFromLog(log));
    }

    public Flowable<DurianHarvestedEventResponse> durianHarvestedEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(DURIANHARVESTED_EVENT));
        return durianHarvestedEventFlowable(filter);
    }

    public static List<OwnershipTransferredEventResponse> getOwnershipTransferredEvents(
            TransactionReceipt transactionReceipt) {
        List<EventValuesWithLog> valueList = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, transactionReceipt);
        ArrayList<OwnershipTransferredEventResponse> responses = new ArrayList<OwnershipTransferredEventResponse>(valueList.size());
        for (EventValuesWithLog eventValues : valueList) {
            OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.batchCode = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
            typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
            typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
            typedResponse.newState = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public static OwnershipTransferredEventResponse getOwnershipTransferredEventFromLog(Log log) {
        EventValuesWithLog eventValues = staticExtractEventParametersWithLog(OWNERSHIPTRANSFERRED_EVENT, log);
        OwnershipTransferredEventResponse typedResponse = new OwnershipTransferredEventResponse();
        typedResponse.log = log;
        typedResponse.batchCode = (BigInteger) eventValues.getIndexedValues().get(0).getValue();
        typedResponse.from = (String) eventValues.getIndexedValues().get(1).getValue();
        typedResponse.to = (String) eventValues.getIndexedValues().get(2).getValue();
        typedResponse.newState = (BigInteger) eventValues.getNonIndexedValues().get(0).getValue();
        typedResponse.timestamp = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
        return typedResponse;
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            EthFilter filter) {
        return web3j.ethLogFlowable(filter).map(log -> getOwnershipTransferredEventFromLog(log));
    }

    public Flowable<OwnershipTransferredEventResponse> ownershipTransferredEventFlowable(
            DefaultBlockParameter startBlock, DefaultBlockParameter endBlock) {
        EthFilter filter = new EthFilter(startBlock, endBlock, getContractAddress());
        filter.addSingleTopic(EventEncoder.encode(OWNERSHIPTRANSFERRED_EVENT));
        return ownershipTransferredEventFlowable(filter);
    }

    protected DurianContract(String contractAddress, org.web3j.protocol.Web3j web3j, org.web3j.tx.TransactionManager transactionManager, ContractGasProvider gasProvider) {
        super("", contractAddress, web3j, transactionManager, gasProvider);
    }

    public RemoteFunctionCall<TransactionReceipt> recordHarvestDurian(BigInteger _batchCode,
                                                                      String durianType, String farmLocation, BigInteger weightInGram) {
        final Function function = new Function(
                FUNC_RECORDHARVESTDURIAN,
                Arrays.<Type>asList(new Uint256(_batchCode),
                        new Utf8String(durianType),
                        new Utf8String(farmLocation),
                        new Uint256(weightInGram)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> removeDurian(BigInteger _batchCode) {
        final Function function = new Function(
                FUNC_REMOVEDURIAN,
                Arrays.<Type>asList(new Uint256(_batchCode)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> setUser(String name, String userAddress,
                                                          String companyAddress, String companyName, BigInteger role) {
        final Function function = new Function(
                FUNC_SETUSER,
                Arrays.<Type>asList(new Utf8String(name),
                        new Address(160, userAddress),
                        new Utf8String(companyAddress),
                        new Utf8String(companyName),
                        new Uint8(role)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> transferDurianOwnership(BigInteger _batchCode,
                                                                          String newOwner) {
        final Function function = new Function(
                FUNC_TRANSFERDURIANOWNERSHIP,
                Arrays.<Type>asList(new Uint256(_batchCode),
                        new Address(160, newOwner)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<TransactionReceipt> updateSpoiledState(BigInteger _batchCode) {
        final Function function = new Function(
                FUNC_UPDATESPOILEDSTATE,
                Arrays.<Type>asList(new Uint256(_batchCode)),
                Collections.<TypeReference<?>>emptyList());
        return executeRemoteCallTransaction(function);
    }

    public RemoteFunctionCall<Boolean> authorizedFarmers(String param0) {
        final Function function = new Function(FUNC_AUTHORIZEDFARMERS,
                Arrays.<Type>asList(new Address(160, param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<BigInteger> batchCodes(BigInteger param0) {
        final Function function = new Function(FUNC_BATCHCODES,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple12<BigInteger, String, BigInteger, BigInteger, String, String, BigInteger, BigInteger, BigInteger, BigInteger, String, String>> durians(
            BigInteger param0) {
        final Function function = new Function(FUNC_DURIANS,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint8>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Address>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }));
        return new RemoteFunctionCall<Tuple12<BigInteger, String, BigInteger, BigInteger, String, String, BigInteger, BigInteger, BigInteger, BigInteger, String, String>>(function,
                new Callable<Tuple12<BigInteger, String, BigInteger, BigInteger, String, String, BigInteger, BigInteger, BigInteger, BigInteger, String, String>>() {
                    @Override
                    public Tuple12<BigInteger, String, BigInteger, BigInteger, String, String, BigInteger, BigInteger, BigInteger, BigInteger, String, String> call(
                    ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple12<BigInteger, String, BigInteger, BigInteger, String, String, BigInteger, BigInteger, BigInteger, BigInteger, String, String>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (String) results.get(4).getValue(),
                                (String) results.get(5).getValue(),
                                (BigInteger) results.get(6).getValue(),
                                (BigInteger) results.get(7).getValue(),
                                (BigInteger) results.get(8).getValue(),
                                (BigInteger) results.get(9).getValue(),
                                (String) results.get(10).getValue(),
                                (String) results.get(11).getValue());
                    }
                });
    }

    public RemoteFunctionCall<BigInteger> durianStateTimestamps(BigInteger param0,
                                                                BigInteger param1) {
        final Function function = new Function(FUNC_DURIANSTATETIMESTAMPS,
                Arrays.<Type>asList(new Uint256(param0),
                        new Uint256(param1)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }));
        return executeRemoteCallSingleValueReturn(function, BigInteger.class);
    }

    public RemoteFunctionCall<Tuple7<BigInteger, String, BigInteger, BigInteger, String, String, String>> generateTrackingReport(
            BigInteger _batchCode) {
        final Function function = new Function(FUNC_GENERATETRACKINGREPORT,
                Arrays.<Type>asList(new Uint256(_batchCode)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Uint256>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint8>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }));
        return new RemoteFunctionCall<Tuple7<BigInteger, String, BigInteger, BigInteger, String, String, String>>(function,
                new Callable<Tuple7<BigInteger, String, BigInteger, BigInteger, String, String, String>>() {
                    @Override
                    public Tuple7<BigInteger, String, BigInteger, BigInteger, String, String, String> call(
                    ) throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple7<BigInteger, String, BigInteger, BigInteger, String, String, String>(
                                (BigInteger) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (String) results.get(4).getValue(),
                                (String) results.get(5).getValue(),
                                (String) results.get(6).getValue());
                    }
                });
    }

    public RemoteFunctionCall<List> getBatchCodes() {
        final Function function = new Function(FUNC_GETBATCHCODES,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {
                }));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Durian> getDurian(BigInteger batchCode) {
        final Function function = new Function(FUNC_GETDURIAN,
                Arrays.<Type>asList(new Uint256(batchCode)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Durian>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Durian.class);
    }

    public RemoteFunctionCall<List> getDurianStateTimestamps(BigInteger _batchCode) {
        final Function function = new Function(FUNC_GETDURIANSTATETIMESTAMPS,
                Arrays.<Type>asList(new Uint256(_batchCode)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Uint256>>() {
                }));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List> getSpoiledDurians() {
        final Function function = new Function(FUNC_GETSPOILEDDURIANS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Durian>>() {
                }));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<List<Type>> getTransactions() {
        final Function function = new Function(FUNC_GETTRANSACTIONS,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Transaction>>() {
                }));
        return new RemoteFunctionCall<>(function,
                new Callable<List<Type>>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List<Type> call() throws Exception {
                        List<Type> result = executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }


    public RemoteFunctionCall<List> getUserDurians(String user) {
        final Function function = new Function(FUNC_GETUSERDURIANS,
                Arrays.<Type>asList(new Address(160, user)),
                Arrays.<TypeReference<?>>asList(new TypeReference<DynamicArray<Durian>>() {
                }));
        return new RemoteFunctionCall<List>(function,
                new Callable<List>() {
                    @Override
                    @SuppressWarnings("unchecked")
                    public List call() throws Exception {
                        List<Type> result = (List<Type>) executeCallSingleValueReturn(function, List.class);
                        return convertToNative(result);
                    }
                });
    }

    public RemoteFunctionCall<Boolean> isBatchCodeExisted(BigInteger batchCode) {
        final Function function = new Function(FUNC_ISBATCHCODEEXISTED,
                Arrays.<Type>asList(new Uint256(batchCode)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<Boolean> isProfileSet(String userAddress) {
        final Function function = new Function(FUNC_ISPROFILESET,
                Arrays.<Type>asList(new Address(160, userAddress)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {
                }));
        return executeRemoteCallSingleValueReturn(function, Boolean.class);
    }

    public RemoteFunctionCall<String> owner() {
        final Function function = new Function(FUNC_OWNER,
                Arrays.<Type>asList(),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }));
        return executeRemoteCallSingleValueReturn(function, String.class);
    }

    public RemoteFunctionCall<Tuple5<String, String, BigInteger, BigInteger, BigInteger>> transactions(
            BigInteger param0) {
        final Function function = new Function(FUNC_TRANSACTIONS,
                Arrays.<Type>asList(new Uint256(param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Address>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint256>() {
                }, new TypeReference<Uint8>() {
                }));
        return new RemoteFunctionCall<Tuple5<String, String, BigInteger, BigInteger, BigInteger>>(function,
                new Callable<Tuple5<String, String, BigInteger, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple5<String, String, BigInteger, BigInteger, BigInteger> call() throws
                            Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple5<String, String, BigInteger, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (BigInteger) results.get(2).getValue(),
                                (BigInteger) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue());
                    }
                });
    }

    public RemoteFunctionCall<Tuple6<String, String, String, String, BigInteger, BigInteger>> users(
            String param0) {
        final Function function = new Function(FUNC_USERS,
                Arrays.<Type>asList(new Address(160, param0)),
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Utf8String>() {
                }, new TypeReference<Uint8>() {
                }, new TypeReference<Uint8>() {
                }));
        return new RemoteFunctionCall<Tuple6<String, String, String, String, BigInteger, BigInteger>>(function,
                new Callable<Tuple6<String, String, String, String, BigInteger, BigInteger>>() {
                    @Override
                    public Tuple6<String, String, String, String, BigInteger, BigInteger> call()
                            throws Exception {
                        List<Type> results = executeCallMultipleValueReturn(function);
                        return new Tuple6<String, String, String, String, BigInteger, BigInteger>(
                                (String) results.get(0).getValue(),
                                (String) results.get(1).getValue(),
                                (String) results.get(2).getValue(),
                                (String) results.get(3).getValue(),
                                (BigInteger) results.get(4).getValue(),
                                (BigInteger) results.get(5).getValue());
                    }
                });
    }

    @Deprecated
    public static DurianContract load(String contractAddress, Web3j web3j, Credentials credentials,
                                      BigInteger gasPrice, BigInteger gasLimit) {
        return new DurianContract(contractAddress, web3j, credentials, gasPrice, gasLimit);
    }

    @Deprecated
    public static DurianContract load(String contractAddress, Web3j web3j,
                                      TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return new DurianContract(contractAddress, web3j, transactionManager, gasPrice, gasLimit);
    }

    public static DurianContract load(String contractAddress, Web3j web3j, Credentials credentials,
                                      ContractGasProvider contractGasProvider) {
        return new DurianContract(contractAddress, web3j, credentials, contractGasProvider);
    }

    public static DurianContract load(String contractAddress, Web3j web3j,
                                      TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return new DurianContract(contractAddress, web3j, transactionManager, contractGasProvider);
    }

    public static RemoteCall<DurianContract> deploy(Web3j web3j, Credentials credentials,
                                                    ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DurianContract.class, web3j, credentials, contractGasProvider, getDeploymentBinary(), "");
    }

    public static RemoteCall<DurianContract> deploy(Web3j web3j,
                                                    TransactionManager transactionManager, ContractGasProvider contractGasProvider) {
        return deployRemoteCall(DurianContract.class, web3j, transactionManager, contractGasProvider, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<DurianContract> deploy(Web3j web3j, Credentials credentials,
                                                    BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DurianContract.class, web3j, credentials, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    @Deprecated
    public static RemoteCall<DurianContract> deploy(Web3j web3j,
                                                    TransactionManager transactionManager, BigInteger gasPrice, BigInteger gasLimit) {
        return deployRemoteCall(DurianContract.class, web3j, transactionManager, gasPrice, gasLimit, getDeploymentBinary(), "");
    }

    public static void linkLibraries(List<Contract.LinkReference> references) {
        librariesLinkedBinary = linkBinaryWithReferences(BINARY, references);
    }

    private static String getDeploymentBinary() {
        if (librariesLinkedBinary != null) {
            return librariesLinkedBinary;
        } else {
            return BINARY;
        }
    }

    public static class Durian extends DynamicStruct {
        public BigInteger batchCode;

        public String durianType;

        public BigInteger state;

        public BigInteger weightInGram;

        public String currentOwner;

        public String farmLocation;

        public BigInteger arriveAtDistributorTime;

        public BigInteger arriveAtRetailerTime;

        public BigInteger timestamp;

        public BigInteger addedTimestamp;

        public String distributorName;

        public String retailerName;

        public Durian(BigInteger batchCode, String durianType, BigInteger state,
                      BigInteger weightInGram, String currentOwner, String farmLocation,
                      BigInteger arriveAtDistributorTime, BigInteger arriveAtRetailerTime,
                      BigInteger timestamp, BigInteger addedTimestamp, String distributorName,
                      String retailerName) {
            super(new Uint256(batchCode),
                    new Utf8String(durianType),
                    new Uint8(state),
                    new Uint256(weightInGram),
                    new Address(160, currentOwner),
                    new Utf8String(farmLocation),
                    new Uint256(arriveAtDistributorTime),
                    new Uint256(arriveAtRetailerTime),
                    new Uint256(timestamp),
                    new Uint256(addedTimestamp),
                    new Utf8String(distributorName),
                    new Utf8String(retailerName));
            this.batchCode = batchCode;
            this.durianType = durianType;
            this.state = state;
            this.weightInGram = weightInGram;
            this.currentOwner = currentOwner;
            this.farmLocation = farmLocation;
            this.arriveAtDistributorTime = arriveAtDistributorTime;
            this.arriveAtRetailerTime = arriveAtRetailerTime;
            this.timestamp = timestamp;
            this.addedTimestamp = addedTimestamp;
            this.distributorName = distributorName;
            this.retailerName = retailerName;
        }

        public Durian(Uint256 batchCode, Utf8String durianType, Uint8 state, Uint256 weightInGram,
                      Address currentOwner, Utf8String farmLocation, Uint256 arriveAtDistributorTime,
                      Uint256 arriveAtRetailerTime, Uint256 timestamp, Uint256 addedTimestamp,
                      Utf8String distributorName, Utf8String retailerName) {
            super(batchCode, durianType, state, weightInGram, currentOwner, farmLocation, arriveAtDistributorTime, arriveAtRetailerTime, timestamp, addedTimestamp, distributorName, retailerName);
            this.batchCode = batchCode.getValue();
            this.durianType = durianType.getValue();
            this.state = state.getValue();
            this.weightInGram = weightInGram.getValue();
            this.currentOwner = currentOwner.getValue();
            this.farmLocation = farmLocation.getValue();
            this.arriveAtDistributorTime = arriveAtDistributorTime.getValue();
            this.arriveAtRetailerTime = arriveAtRetailerTime.getValue();
            this.timestamp = timestamp.getValue();
            this.addedTimestamp = addedTimestamp.getValue();
            this.distributorName = distributorName.getValue();
            this.retailerName = retailerName.getValue();
        }
    }

    public static class Transaction extends StaticStruct {
        public String from;

        public String to;

        public BigInteger durianId;

        public BigInteger timestamp;

        public BigInteger action;

        public Transaction(String from, String to, BigInteger durianId, BigInteger timestamp,
                           BigInteger action) {
            super(new Address(160, from),
                    new Address(160, to),
                    new Uint256(durianId),
                    new Uint256(timestamp),
                    new Uint8(action));
            this.from = from;
            this.to = to;
            this.durianId = durianId;
            this.timestamp = timestamp;
            this.action = action;
        }

        public Transaction(Address from, Address to, Uint256 durianId, Uint256 timestamp,
                           Uint8 action) {
            super(from, to, durianId, timestamp, action);
            this.from = from.getValue();
            this.to = to.getValue();
            this.durianId = durianId.getValue();
            this.timestamp = timestamp.getValue();
            this.action = action.getValue();
        }
    }

    public static class DurianHarvestedEventResponse extends BaseEventResponse {
        public BigInteger batchCode;

        public BigInteger timestamp;
    }

    public static class OwnershipTransferredEventResponse extends BaseEventResponse {
        public BigInteger batchCode;

        public String from;

        public String to;

        public BigInteger newState;

        public BigInteger timestamp;
    }
}
